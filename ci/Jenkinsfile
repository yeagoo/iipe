#!/usr/bin/env groovy

/**
 * Jenkins Pipeline for iipe PHP Project
 * 
 * 功能：
 * - 自动化构建多版本PHP
 * - 跨平台兼容性测试
 * - 自动化部署和发布
 * - 构建状态通知
 */

pipeline {
    agent any
    
    // 参数化构建
    parameters {
        choice(
            name: 'BUILD_TYPE',
            choices: ['basic', 'full', 'release'],
            description: '构建类型'
        )
        string(
            name: 'PHP_VERSIONS',
            defaultValue: '8.2,8.3',
            description: 'PHP版本列表（逗号分隔）'
        )
        string(
            name: 'TARGET_SYSTEMS',
            defaultValue: 'almalinux-9,rocky-linux-9',
            description: '目标系统列表（逗号分隔）'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: '跳过测试阶段'
        )
        booleanParam(
            name: 'DEPLOY_TO_PROD',
            defaultValue: false,
            description: '部署到生产环境'
        )
    }
    
    // 环境变量
    environment {
        REGISTRY_URL = 'repo.ii.pe'
        BUILD_NUMBER_PADDED = sprintf('%03d', BUILD_NUMBER.toInteger())
        BUILD_TIMESTAMP = sh(script: 'date +%Y%m%d-%H%M%S', returnStdout: true).trim()
        WORKSPACE_CLEAN = 'true'
    }
    
    // 构建选项
    options {
        // 保留最近10次构建
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // 超时时间
        timeout(time: 2, unit: 'HOURS')
        // 时间戳
        timestamps()
        // 控制台输出颜色
        ansiColor('xterm')
        // 并行构建锁定
        disableConcurrentBuilds()
    }
    
    // 触发器
    triggers {
        // 定时构建：每天凌晨2点
        cron('0 2 * * *')
        // 轮询SCM变化
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('初始化') {
            steps {
                script {
                    echo "======================================================================"
                    echo "iipe PHP 项目构建开始"
                    echo "======================================================================"
                    echo "构建类型: ${params.BUILD_TYPE}"
                    echo "PHP版本: ${params.PHP_VERSIONS}"
                    echo "目标系统: ${params.TARGET_SYSTEMS}"
                    echo "跳过测试: ${params.SKIP_TESTS}"
                    echo "部署生产: ${params.DEPLOY_TO_PROD}"
                    echo "======================================================================"
                    
                    // 设置构建描述
                    currentBuild.description = "PHP ${params.PHP_VERSIONS} | ${params.BUILD_TYPE}"
                    
                    // 清理工作空间
                    if (env.WORKSPACE_CLEAN == 'true') {
                        cleanWs()
                    }
                }
            }
        }
        
        stage('检出代码') {
            steps {
                checkout scm
                script {
                    // 获取Git信息
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.GIT_BRANCH = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('环境验证') {
            parallel {
                stage('语法检查') {
                    steps {
                        script {
                            echo "检查Shell脚本语法..."
                            sh '''
                                for script in *.sh; do
                                    if [ -f "$script" ]; then
                                        echo "检查 $script"
                                        bash -n "$script" || echo "警告: $script 语法有问题"
                                    fi
                                done
                            '''
                        }
                    }
                }
                
                stage('文件验证') {
                    steps {
                        script {
                            echo "验证必需文件..."
                            sh '''
                                required_files="build.sh batch-build.sh test-builds.sh publish.sh quick-start.sh macros.iipe-php"
                                for file in $required_files; do
                                    if [ -f "$file" ]; then
                                        echo "✅ $file 存在"
                                    else
                                        echo "❌ $file 缺失"
                                        exit 1
                                    fi
                                done
                            '''
                        }
                    }
                }
                
                stage('依赖检查') {
                    steps {
                        script {
                            echo "检查系统依赖..."
                            sh '''
                                # 检查必需的系统工具
                                command -v rpm >/dev/null 2>&1 || { echo "需要安装 rpm"; exit 1; }
                                command -v createrepo_c >/dev/null 2>&1 || { echo "需要安装 createrepo_c"; exit 1; }
                                echo "✅ 所有依赖都已满足"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('项目初始化') {
            steps {
                script {
                    echo "初始化项目结构..."
                    sh './init-project.sh'
                }
            }
        }
        
        stage('并行构建') {
            steps {
                script {
                    def phpVersions = params.PHP_VERSIONS.split(',')
                    def targetSystems = params.TARGET_SYSTEMS.split(',')
                    def buildJobs = [:]
                    
                    // 创建并行构建任务
                    phpVersions.each { phpVersion ->
                        targetSystems.each { system ->
                            def version = phpVersion.trim()
                            def sys = system.trim()
                            def jobName = "PHP-${version}-${sys}"
                            
                            buildJobs[jobName] = {
                                stage("构建 ${jobName}") {
                                    try {
                                        echo "开始构建 PHP ${version} for ${sys}"
                                        
                                        // 实际构建命令（在生产环境中取消注释）
                                        // sh "./build.sh -v ${version} -s ${sys}"
                                        
                                        // 模拟构建过程
                                        sh """
                                            mkdir -p repo_output/${sys}
                                            touch repo_output/${sys}/iipe-php${version.replace('.', '')}-1.0.0-1.x86_64.rpm
                                            echo "模拟构建 PHP ${version} for ${sys} 完成"
                                        """
                                        
                                        // 归档构建产物
                                        archiveArtifacts artifacts: "repo_output/${sys}/*.rpm", fingerprint: true
                                        
                                    } catch (Exception e) {
                                        echo "构建失败: ${jobName} - ${e.getMessage()}"
                                        currentBuild.result = 'UNSTABLE'
                                    }
                                }
                            }
                        }
                    }
                    
                    // 执行并行构建
                    parallel buildJobs
                }
            }
        }
        
        stage('测试验证') {
            when {
                not { params.SKIP_TESTS }
            }
            steps {
                script {
                    def phpVersions = params.PHP_VERSIONS.split(',')
                    def targetSystems = params.TARGET_SYSTEMS.split(',')
                    def testJobs = [:]
                    
                    // 创建并行测试任务
                    phpVersions.each { phpVersion ->
                        targetSystems.each { system ->
                            def version = phpVersion.trim()
                            def sys = system.trim()
                            def jobName = "Test-PHP-${version}-${sys}"
                            
                            testJobs[jobName] = {
                                stage("测试 ${jobName}") {
                                    try {
                                        echo "开始测试 PHP ${version} for ${sys}"
                                        
                                        // 实际测试命令（在生产环境中取消注释）
                                        // sh "./test-builds.sh -v ${version} -s ${sys} -t basic"
                                        
                                        // 模拟测试过程
                                        sh """
                                            mkdir -p test-results
                                            echo "PASS" > test-results/php-${version.replace('.', '')}-${sys}.result
                                            echo "模拟测试 PHP ${version} for ${sys} 完成"
                                        """
                                        
                                    } catch (Exception e) {
                                        echo "测试失败: ${jobName} - ${e.getMessage()}"
                                        currentBuild.result = 'UNSTABLE'
                                    }
                                }
                            }
                        }
                    }
                    
                    // 执行并行测试
                    parallel testJobs
                }
            }
            post {
                always {
                    // 发布测试结果
                    archiveArtifacts artifacts: 'test-results/**', fingerprint: true, allowEmptyArchive: true
                    
                    // 如果有JUnit格式的测试结果，发布它们
                    script {
                        if (fileExists('test-results/*.xml')) {
                            junit 'test-results/*.xml'
                        }
                    }
                }
            }
        }
        
        stage('生成报告') {
            steps {
                script {
                    echo "生成构建报告..."
                    sh '''
                        cat > build-report.md << EOF
# iipe PHP 构建报告

**构建时间**: $(date)
**构建编号**: ${BUILD_NUMBER}
**Git分支**: ${GIT_BRANCH}
**Git提交**: ${GIT_COMMIT_SHORT}
**构建类型**: ${BUILD_TYPE}

## 构建配置

- **PHP版本**: ${PHP_VERSIONS}
- **目标系统**: ${TARGET_SYSTEMS}
- **跳过测试**: ${SKIP_TESTS}

## 构建结果

构建已完成，详情请查看构建日志。

## 产物位置

- **RPM包**: repo_output/
- **测试结果**: test-results/

EOF
                    '''
                    
                    // 归档报告
                    archiveArtifacts artifacts: 'build-report.md', fingerprint: true
                }
            }
        }
        
        stage('发布准备') {
            when {
                anyOf {
                    branch 'main'
                    params.BUILD_TYPE == 'release'
                }
            }
            steps {
                script {
                    echo "准备发布..."
                    sh './publish.sh'
                    
                    // 归档发布产物
                    archiveArtifacts artifacts: 'repo_output/**', fingerprint: true
                }
            }
        }
        
        stage('部署生产') {
            when {
                allOf {
                    params.DEPLOY_TO_PROD
                    branch 'main'
                }
            }
            steps {
                script {
                    echo "部署到生产环境..."
                    
                    // 使用Jenkins凭据进行部署
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'deploy-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        )
                    ]) {
                        sh '''
                            # 部署到生产服务器
                            rsync -avz -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" \
                                repo_output/ $SSH_USER@$REGISTRY_URL:/var/www/repo/
                            
                            # 重载Web服务器
                            ssh -i $SSH_KEY -o StrictHostKeyChecking=no \
                                $SSH_USER@$REGISTRY_URL "systemctl reload nginx"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "构建完成，清理临时文件..."
                
                // 清理大型临时文件，但保留重要产物
                sh '''
                    find . -name "*.tmp" -delete 2>/dev/null || true
                    find . -name "core.*" -delete 2>/dev/null || true
                '''
            }
        }
        
        success {
            script {
                echo "✅ 构建成功！"
                
                // 发送成功通知
                if (env.WEBHOOK_URL) {
                    httpRequest(
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        url: env.WEBHOOK_URL,
                        requestBody: """
                        {
                            "text": "✅ iipe PHP 构建成功",
                            "build_url": "${BUILD_URL}",
                            "build_number": "${BUILD_NUMBER}",
                            "branch": "${env.GIT_BRANCH}",
                            "commit": "${env.GIT_COMMIT_SHORT}"
                        }
                        """
                    )
                }
            }
        }
        
        failure {
            script {
                echo "❌ 构建失败！"
                
                // 发送失败通知
                if (env.WEBHOOK_URL) {
                    httpRequest(
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        url: env.WEBHOOK_URL,
                        requestBody: """
                        {
                            "text": "❌ iipe PHP 构建失败",
                            "build_url": "${BUILD_URL}",
                            "build_number": "${BUILD_NUMBER}",
                            "branch": "${env.GIT_BRANCH}",
                            "commit": "${env.GIT_COMMIT_SHORT}"
                        }
                        """
                    )
                }
                
                // 发送邮件通知（如果配置了）
                emailext(
                    subject: "构建失败: iipe PHP #${BUILD_NUMBER}",
                    body: """
                    构建失败详情：
                    
                    项目：iipe PHP
                    构建编号：${BUILD_NUMBER}
                    分支：${env.GIT_BRANCH}
                    提交：${env.GIT_COMMIT_SHORT}
                    
                    请查看构建日志：${BUILD_URL}
                    """,
                    to: "${env.NOTIFICATION_EMAIL ?: 'admin@ii.pe'}"
                )
            }
        }
        
        unstable {
            script {
                echo "⚠️ 构建不稳定，部分任务失败"
            }
        }
        
        cleanup {
            script {
                // 最终清理
                echo "执行最终清理..."
            }
        }
    }
} 